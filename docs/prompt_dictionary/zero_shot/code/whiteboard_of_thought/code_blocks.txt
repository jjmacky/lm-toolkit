
import matplotlib.pyplot as plt
import matplotlib.colors as mcolors

ascii_art = """
 d8888b....d8b...d888888b.d888888b.db......d88888b..d8888..db...db.d888888b.
88..`8D.d8'.`8b.`~~88~~'.`~~88~~'.88......88'.....88'..YP.88...88...`88'...
88oooY'.88ooo88....88.......88....88......88ooooo.`8bo....88ooo88....88....
88~~~b..88~~~88....88.......88....88......88~~~~~...`Y8b..88~~~88....88....
88...8D.88...88....88.......88....88booo..88......db...8D.88...88....88....
Y8888P'.YP...YP....YP.......YP....Y88888P.Y88888P.`8888Y'.YP...YP.Y888888P.
...........................................................................
...........................................................................
d8888b...d8888..
88..`8D.88'..YP.
88oodD'.`8bo....
88~~~.....`Y8b..
88......db...8D.
88......`8888Y'.
................
................
"""

# Split the ASCII art into lines
lines = ascii_art.strip().split('\n')

# Find the maximum line length
max_length = max(len(line) for line in lines)

# Create a 2D list to store the characters
char_grid = [[' ' for _ in range(max_length)] for _ in range(len(lines))]

# Fill the char_grid with the ASCII art
for i, line in enumerate(lines):
    for j, char in enumerate(line):
        char_grid[i][j] = char

# Create a figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Define colors
bg_color = mcolors.to_rgb('white')
text_color = mcolors.to_rgb('black')

# Create an image array
image = []
for row in char_grid:
    image_row = []
    for char in row:
        if char == ' ':
            image_row.append(bg_color)
        else:
            image_row.append(text_color)
    image.append(image_row)

# Display the image
ax.imshow(image, aspect='equal')

# Remove axis ticks and labels
ax.set_xticks([])
ax.set_yticks([])

# Remove the axis
ax.axis('off')

# Show the plot
plt.tight_layout()
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

# ASCII art
ascii_art = """
 ...****..........................................**
../**/........................................../**
.******..******..******.**********...*****....../**
///**/..**////**//**//*//**//**//**.**///**..******
../**../**.../**./**./../**./**./**/*******.**///**
../**../**.../**./**..../**./**./**/**////./**../**
../**..//******./***....***./**./**//******//******
..//....//////..///....///..//..//..//////..//////.
"""

# Remove leading/trailing whitespace and split into lines
lines = ascii_art.strip().split('\n')

# Determine the dimensions of the ASCII art
height = len(lines)
width = max(len(line) for line in lines)

# Create a 2D numpy array to store the image data
image_data = np.zeros((height, width, 3), dtype=float)

# Define colors (in RGB format)
colors = {
    '.': (1, 1, 1),    # White
    '*': (0, 0, 1),    # Blue
    '/': (1, 0, 0),    # Red
}

# Fill the image data array
for y, line in enumerate(lines):
    for x, char in enumerate(line):
        if char in colors:
            image_data[y, x] = colors[char]
        else:
            image_data[y, x] = (1, 1, 1)  # Default to white for unknown characters

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(image_data, interpolation='nearest')

# Remove axis ticks and labels
ax.set_xticks([])
ax.set_yticks([])

# Remove the axis border
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)

# Adjust the plot to remove extra whitespace
plt.tight_layout()

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

# ASCII art
ascii_art = """
 ..............................................................
..............................................................
..iiii........................................................
.i::::i.......................................................
..iiii........................................................
..............................................................
iiiiiiirrrrr...rrrrrrrrr......ooooooooooo...nnnn..nnnnnnnn....
i:::::ir::::rrr:::::::::r...oo:::::::::::oo.n:::nn::::::::nn..
.i::::ir:::::::::::::::::r.o:::::::::::::::on::::::::::::::nn.
.i::::irr::::::rrrrr::::::ro:::::ooooo:::::onn:::::::::::::::n
.i::::i.r:::::r.....r:::::ro::::o.....o::::o..n:::::nnnn:::::n
.i::::i.r:::::r.....rrrrrrro::::o.....o::::o..n::::n....n::::n
.i::::i.r:::::r............o::::o.....o::::o..n::::n....n::::n
.i::::i.r:::::r............o::::o.....o::::o..n::::n....n::::n
i::::::ir:::::r............o:::::ooooo:::::o..n::::n....n::::n
i::::::ir:::::r............o:::::::::::::::o..n::::n....n::::n
i::::::ir:::::r.............oo:::::::::::oo...n::::n....n::::n
iiiiiiiirrrrrrr...............ooooooooooo.....nnnnnn....nnnnnn
..............................................................
..............................................................
..............................................................
..............................................................
..............................................................
..............................................................
..............................................................
"""

# Split the ASCII art into lines
lines = ascii_art.strip().split('\n')

# Get the maximum line length
max_length = max(len(line) for line in lines)

# Create a 2D array to store the character values
char_array = np.zeros((len(lines), max_length), dtype='U1')

# Fill the array with characters from the ASCII art
for i, line in enumerate(lines):
    char_array[i, :len(line)] = list(line)

# Define color mapping
color_map = {
    '.': (1, 1, 1),    # White
    'i': (0, 0, 1),    # Blue
    'r': (1, 0, 0),    # Red
    'o': (1, 0.5, 0),  # Orange
    'n': (0, 1, 0),    # Green
    ':': (0.5, 0.5, 0.5)  # Gray
}

# Create an RGB array
rgb_array = np.zeros((char_array.shape[0], char_array.shape[1], 3))

# Map characters to colors
for char, color in color_map.items():
    rgb_array[char_array == char] = color

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(rgb_array)

# Remove axis ticks
ax.set_xticks([])
ax.set_yticks([])

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

ascii_art = [
    " ......_.._..............................................",
    "...._(_)(_).............................................",
    "._.(_)._.._......._.._...._.._.._......_.._..._.._.....
    "(_)(_)(_)(_)_.._.(_)(_)_.(_)(_)(_)._..(_)(_)_(_)(_)....",
    "...(_).....(_)(_).....(_).........(_)(_)...(_)...(_)...",
    "...(_).....(_)........(_).........(_)(_)...(_)...(_)...",
    "...(_).....(_)........(_)._.._.._.(_)(_)...(_)...(_)...",
    "...(_).....(_)...........(_)(_)(_)...(_)...(_)...(_)...",
    ".......................................................",
    "......................................................."
]

# Define the color mapping
color_map = {
    ' ': (1, 1, 1),  # White for empty space
    '.': (0.8, 0.8, 0.8),  # Light gray for dots
    '_': (0, 0, 0),  # Black for underscores
    '(': (0, 0, 0),  # Black for parentheses
    ')': (0, 0, 0)   # Black for parentheses
}

# Find the maximum width of the ASCII art
max_width = max(len(row) for row in ascii_art)

# Create a 2D numpy array to hold the image data
image_data = np.ones((len(ascii_art), max_width, 3))

# Fill the image data based on the ASCII art
for i, row in enumerate(ascii_art):
    for j, char in enumerate(row):
        image_data[i, j] = color_map.get(char, (1, 1, 1))  # Default to white if character not in color_map

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(image_data, interpolation='nearest')

# Remove axis ticks and labels
ax.set_xticks([])
ax.set_yticks([])

# Remove the axis border
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)

# Adjust the plot to fill the figure
plt.tight_layout()

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

ascii_art = """
 .d8888..db....db...o88b....o88b..d88888b..d8888...d8888..
88'..YP.88....88.d8P..Y8.d8P..Y8.88'.....88'..YP.88'..YP.
`8bo....88....88.8P......8P......88ooooo.`8bo....`8bo....
..`Y8b..88....88.8b......8b......88~~~~~...`Y8b....`Y8b..
db...8D.88b..d88.Y8b..d8.Y8b..d8.88......db...8D.db...8D.
`8888Y'.~Y8888P'..`Y88P'..`Y88P'.Y88888P.`8888Y'.`8888Y'.
.........................................................
.........................................................
"""

# Split the ASCII art into lines
lines = ascii_art.strip().split('\n')

# Find the maximum line length
max_length = max(len(line) for line in lines)

# Create a 2D numpy array to store the image data
image_data = np.ones((len(lines), max_length, 3))

# Define colors (in RGB format)
background_color = (1, 1, 1)  # White
text_color = (0, 0, 0)  # Black

# Fill the image data
for i, line in enumerate(lines):
    for j, char in enumerate(line):
        if char != ' ':
            image_data[i, j] = text_color

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(image_data, interpolation='nearest')

# Remove axes and margins
ax.axis('off')
plt.subplots_adjust(left=0, right=1, top=1, bottom=0, wspace=0, hspace=0)

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

ascii_art = """
 db....db.d8888b...d888b..d8888b....d8b...d8888b..d88888b.d8888b..
88....88.88..`8D.88'.Y8b.88..`8D.d8'.`8b.88..`8D.88'.....88..`8D.
88....88.88oodD'.88......88oobY'.88ooo88.88...88.88ooooo.88...88.
88....88.88~~~...88..ooo.88`8b...88~~~88.88...88.88~~~~~.88...88.
88b..d88.88......88..~8~.88.`88..88...88.88...8D.88......88...8D.
~Y8888P'.88.......Y888P..88...YD.YP...YP.Y8888D'.Y88888P.Y8888D'.
.................................................................
.................................................................
"""

# Split the ASCII art into lines
lines = ascii_art.strip().split('\n')

# Find the maximum line length
max_length = max(len(line) for line in lines)

# Create a 2D numpy array to represent the image
image = np.zeros((len(lines), max_length, 3), dtype=float)

# Define colors for different characters
colors = {
    '.': (1, 1, 1),    # White
    'd': (0, 0, 1),    # Blue
    '8': (1, 0, 0),    # Red
    'b': (0, 1, 0),    # Green
    '~': (1, 1, 0),    # Yellow
    'Y': (1, 0, 1),    # Magenta
    'P': (0, 1, 1),    # Cyan
    ' ': (0, 0, 0),    # Black (background)
}

# Fill the image array with colors based on the ASCII characters
for i, line in enumerate(lines):
    for j, char in enumerate(line):
        image[i, j] = colors.get(char, (0.5, 0.5, 0.5))  # Default to gray if character not found

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(image, interpolation='nearest')

# Remove axis ticks and labels
ax.set_xticks([])
ax.set_yticks([])

# Remove the axis
ax.axis('off')

# Adjust the plot to remove any padding
plt.tight_layout(pad=0)

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

# ASCII art
ascii_art = [
    " db...db.d88888b...d8b...d8888b..",
    "88...88.88'.....d8'.`8b.88..`8D.",
    "88ooo88.88ooooo.88ooo88.88...88.",
    "88~~~88.88~~~~~.88~~~88.88...88.",
    "88...88.88......88...88.88...8D.",
    "YP...YP.Y88888P.YP...YP.Y8888D'.",
    "................................",
    "................................"
]

# Create a figure with the specified size
fig, ax = plt.subplots(figsize=(6, 6))

# Get the maximum width of the ASCII art
max_width = max(len(row) for row in ascii_art)

# Create a 2D array to store the image data
image_data = np.ones((len(ascii_art), max_width, 3))

# Map characters to colors
color_map = {
    ' ': (1, 1, 1),  # White
    '.': (0.8, 0.8, 0.8),  # Light gray
    'd': (0, 0, 1),  # Blue
    '8': (1, 0, 0),  # Red
    'b': (0, 1, 0),  # Green
    'Y': (1, 1, 0),  # Yellow
    'P': (1, 0, 1),  # Magenta
    '~': (0, 1, 1),  # Cyan
    "'": (0.5, 0.5, 0.5),  # Dark gray
    '`': (0.7, 0.7, 0.7),  # Medium gray
}

# Fill the image data array
for i, row in enumerate(ascii_art):
    for j, char in enumerate(row):
        image_data[i, j] = color_map.get(char, (0, 0, 0))  # Default to black if character not in map

# Display the image
ax.imshow(image_data, interpolation='nearest')

# Remove axes
ax.axis('off')

# Adjust the layout to remove any extra whitespace
plt.tight_layout()

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

# ASCII art
ascii_art = """
 .**.......................................................
/**.......................................................
/**.......*****...*****...******...**...**..******..*****.
/******..**///**.**///**.//////**./**../**.**////..**///**
/**///**/*******/**..//...*******./**../**//*****./*******
/**../**/**////./**...**.**////**./**../**./////**/**////.
/******.//******//*****.//********//******.******.//******
/////....//////../////...////////..//////.//////...//////.
"""

# Remove leading/trailing whitespace and split into lines
lines = ascii_art.strip().split('\n')

# Get the maximum line length
max_length = max(len(line) for line in lines)

# Create a 2D numpy array to hold the image data
image_data = np.ones((len(lines), max_length, 3))

# Map characters to colors
color_map = {
    '.': (1, 1, 1),  # White
    '*': (0, 0, 1),  # Blue
    '/': (1, 0, 0),  # Red
    ' ': (1, 1, 1),  # White (background)
}

# Fill the image data array
for i, line in enumerate(lines):
    for j, char in enumerate(line):
        image_data[i, j] = color_map.get(char, (1, 1, 1))  # Default to white if character not in map

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(image_data, interpolation='nearest')

# Remove axis ticks and labels
ax.set_xticks([])
ax.set_yticks([])

# Remove the axis border
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)

# Adjust the plot to fill the figure
plt.tight_layout()

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

ascii_art = '''
 ..................................................................
..................................................................
............................................tttt............iiii..
.........................................ttt:::t...........i::::i.
.........................................t:::::t............iiii..
.........................................t:::::t..................
..aaaaaaaaaaaaa..nnnn..nnnnnnnn....ttttttt:::::ttttttt....iiiiiii.
..a::::::::::::a.n:::nn::::::::nn..t:::::::::::::::::t....i:::::i.
..aaaaaaaaa:::::an::::::::::::::nn.t:::::::::::::::::t.....i::::i.
...........a::::ann:::::::::::::::ntttttt:::::::tttttt.....i::::i.
....aaaaaaa:::::a..n:::::nnnn:::::n......t:::::t...........i::::i.
..aa::::::::::::a..n::::n....n::::n......t:::::t...........i::::i.
.a::::aaaa::::::a..n::::n....n::::n......t:::::t...........i::::i.
a::::a....a:::::a..n::::n....n::::n......t:::::t....tttttt.i::::i.
a::::a....a:::::a..n::::n....n::::n......t::::::tttt:::::ti::::::i
a:::::aaaa::::::a..n::::n....n::::n......tt::::::::::::::ti::::::i
.a::::::::::aa:::a.n::::n....n::::n........tt:::::::::::tti::::::i
..aaaaaaaaaa..aaaa.nnnnnn....nnnnnn..........ttttttttttt..iiiiiiii
..................................................................
..................................................................
..................................................................
..................................................................
..................................................................
..................................................................
..................................................................
'''

# Split the ASCII art into lines
lines = ascii_art.strip().split('\n')

# Find the maximum line length
max_width = max(len(line) for line in lines)

# Create a 2D numpy array to store the image data
height = len(lines)
width = max_width
image = np.ones((height, width, 3))  # White background

# Define colors for each character
color_map = {
    '.': (1, 1, 1),    # White (background)
    'a': (1, 0, 0),    # Red
    'n': (0, 1, 0),    # Green
    't': (0, 0, 1),    # Blue
    'i': (1, 1, 0),    # Yellow
    ':': (0.5, 0.5, 0.5)  # Gray
}

# Fill the image array with colors based on the ASCII characters
for y, line in enumerate(lines):
    for x, char in enumerate(line):
        if char in color_map:
            image[y, x] = color_map[char]

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(image, interpolation='nearest')

# Remove axis ticks and labels
ax.set_xticks([])
ax.set_yticks([])

# Remove the axis entirely
ax.axis('off')

# Adjust the plot to remove any padding
plt.subplots_adjust(top=1, bottom=0, right=1, left=0, hspace=0, wspace=0)
plt.margins(0, 0)

# Show the plot
plt.show()



 -------------

import matplotlib.pyplot as plt
import numpy as np

# ASCII art
ascii_art = """
 .................._.................._..............._............
.................(_)................(_).............(_)...........
.._.._.._.._..._.._......_.._.._.._.(_)._.._.._..._.(_)._.._......
.(_)(_)(_)(_)_(_)(_)..._(_)(_)(_)(_)(_)(_)(_)(_)_(_)(_)(_)(_).....
(_)._.._.._.(_)..(_)..(_)........(_)(_)........(_)..(_)...........
(_)(_)(_)(_)(_)..(_)..(_)........(_)(_)........(_)..(_)....._.....
(_)_.._.._.._.._.(_)._(_)_.._.._.(_)(_)........(_)..(_)_.._(_)....
..(_)(_)(_)(_)(_)(_)(_).(_)(_)(_)(_)(_)........(_)....(_)(_)......
........................._.._.._.(_)..............................
........................(_)(_)(_).................................
"""

# Split the ASCII art into lines
lines = ascii_art.strip().split('\n')

# Find the maximum line length
max_length = max(len(line) for line in lines)

# Create a 2D numpy array to hold the image data
image_data = np.ones((len(lines), max_length, 3))

# Map characters to colors
color_map = {
    '.': (1, 1, 1),  # White
    '_': (0, 0, 0),  # Black
    '(': (0, 0, 0),  # Black
    ')': (0, 0, 0),  # Black
}

# Fill the image data array
for i, line in enumerate(lines):
    for j, char in enumerate(line):
        if char in color_map:
            image_data[i, j] = color_map[char]

# Create the figure and axis
fig, ax = plt.subplots(figsize=(6, 6))

# Display the image
ax.imshow(image_data, interpolation='nearest')

# Remove axis ticks and labels
ax.set_xticks([])
ax.set_yticks([])

# Remove the axis border
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
ax.spines['bottom'].set_visible(False)
ax.spines['left'].set_visible(False)

# Adjust the plot to fill the figure
plt.tight_layout()

# Show the plot
plt.show()



 -------------
